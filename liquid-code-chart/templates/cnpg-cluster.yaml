apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ required "Cluster name required" .Values.cnpg.clusterName }}
spec:
  startDelay: 300
  stopDelay: 300
  instances: 3
  storage:
    size: 2Gi
  monitoring:
    enablePodMonitor: true

  {{ if .Values.cnpg.recovery.enable }}
  externalClusters:
    - name: {{ required "Old cluster name required" .Values.cnpg.recovery.oldClusterName }}
      barmanObjectStore:
        destinationPath: {{ .Values.cnpg.recovery.oldClusterName }}
        endpointURL: {{ .Values.s3.endpointUrl | quote }}
        s3Credentials:
          accessKeyId:
            name: {{ .Values.s3.secretName | quote}}
            key: {{ .Values.s3.accessKeyKey | quote }}
          secretAccessKey:
            name: {{ .Values.s3.secretName | quote}}
            key: {{ .Values.s3.secretKeyKey | quote }}
        wal:
          maxParallel: 8


  {{ end }}

  bootstrap:
    {{ if .Values.cnpg.recovery.enable }}
    recovery:
      source: {{ required "Old cluster name required" .Values.cnpg.recovery.oldClusterName }}
    {{ end }}

  {{ if .Values.cnpg.backup.enable }}
  backup:
    barmanObjectStore:
      destinationPath: {{ .Values.cnpg.backup.destinationPath }}
      endpointURL: {{ .Values.s3.endpointUrl | quote }}
      s3Credentials:
        accessKeyId:
          name: {{ .Values.s3.secretName | quote}}
          key: {{ .Values.s3.accessKeyKey | quote }}
        secretAccessKey:
          name: {{ .Values.s3.secretName | quote}}
          key: {{ .Values.s3.secretKeyKey | quote }}
      wal:
        compression: bzip2
        maxParallel: 8
      data:
        compression: bzip2
    retentionPolicy: "7d"
  {{ end }}
